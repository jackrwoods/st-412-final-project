SPY <- fromJSON(SPY, flatten = TRUE)
View(SPY)
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point() +
geom_line()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point() +
geom_area()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point() +
geom_line()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point() +
geom_smooth()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point() +
geom_smooth(method="poly")
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point() +
geom_line()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point() +
geom_bar()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close)) +
geom_point() +
geom_line()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close, group = 1)) +
geom_point() +
geom_line()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close, group = 1)) +
geom_line()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, y = close, group = 1)) +
geom_line() +
geom_bar(aes(y = volume))
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar(aes(y = volume))
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close))
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar(aes(y = volume))
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar()
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar(aes(y = volume))
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar(aes(y = volume), stat = "identity")
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar(aes(y = volume, color="dodgerblue"), stat = "identity")
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar(aes(y = volume, color="dodgerblue"), stat = "identity")
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close,)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue")
# Create a histogram of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue")
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close), color = "dodgerblue") +
# Create a time series chart of volume
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue")
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close), color = "dodgerblue")
# Create a time series chart of volume
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue")
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
scale_y_continuous(name="close", sec.axis = sec_axis(~ 2*., name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name="close", sec.axis = sec_axis(~ 2*., name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(~ /2., name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~, name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ , name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ ./100000, name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ ./1000000, name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ ./1, name="volume"))
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "2y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste("https://cloud.iexapis.com/stable/stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ ./max(SPL$), name="volume"))
View(SPY)
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ ./max(SPL$volume), name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ ./max(SPY$volume), name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ ./min(SPY$volume), name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
geom_bar(aes(y = volume), stat = "identity", color = "dodgerblue") +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ ./min(SPY$volume), name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close)) +
scale_y_continuous(name = "close", sec.axis = sec_axis(trans = ~ ./min(SPY$volume), name="volume"))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, group = 1)) +
geom_line(aes(y = close), color="dodgerblue")
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, y = close, group = 1)) +
geom_line(color="dodgerblue")
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = changepercent, group = 1)) +
geom_line(color="dodgerblue")
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = changePercent, group = 1)) +
geom_line(color = "dodgerblue")
SPL <-
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = log(changePercent), group = 1)) +
geom_line(color = "dodgerblue")
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "2y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste("https://cloud.iexapis.com/stable/stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "2y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste("https://cloud.iexapis.com/stable/stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
SPY
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "1m" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste("https://cloud.iexapis.com/stable/stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, y = close, group = 1)) +
geom_line(color = "dodgerblue")
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = changePercent, group = 1)) +
geom_line(color = "dodgerblue")
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = log(changePercent), group = 1)) +
geom_line(color = "dodgerblue")
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "2y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste("https://cloud.iexapis.com/stable/stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "2y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, y = close, group = 1)) +
geom_line(color = "dodgerblue")
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = changePercent, group = 1)) +
geom_line(color = "dodgerblue")
SPY$logChangePercent <- log(SPY$changePercent)
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = changePercent, group = 1)) +
geom_line(color = "dodgerblue")
SPY$logChangePercent <- log(SPY$changePercent)
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = logChangePercent, group = 1)) +
geom_line(color = "dodgerblue")
SPY$logChangePercent <- log(abs(SPY$changePercent))
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = logChangePercent, group = 1)) +
geom_line(color = "dodgerblue")
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = changePercent, group = 1)) +
geom_point(color = "dodgerblue")
SPY$logChangePercent <- log(abs(SPY$changePercent))
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = logChangePercent, group = 1)) +
geom_point(color = "dodgerblue")
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = changePercent)) +
geom_point(color = "dodgerblue")
SPY$logChangePercent <- log(abs(SPY$changePercent))
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = logChangePercent)) +
geom_point(color = "dodgerblue")
SPY$logChangePercent <- sqrt(abs(SPY$changePercent))
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = logChangePercent)) +
geom_point(color = "dodgerblue")
SPY$logChangePercent <- log(abs(SPY$changePercent))
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = logChangePercent)) +
geom_point(color = "dodgerblue")
SPY$logChangePercent <- log(abs(SPY$changePercent * 1000))
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = logChangePercent)) +
geom_point(color = "dodgerblue")
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "5y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, y = close, group = 1)) +
geom_line(color = "dodgerblue")
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = changePercent)) +
geom_point(color = "dodgerblue")
SPY$logChangePercent <- log(abs(SPY$changePercent))
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = logChangePercent)) +
geom_point(color = "dodgerblue")
SPY$logChangePercent <- log(abs(SPY$changePercent))
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = logChangePercent)) +
geom_point(color = "dodgerblue")
SPY$spread <- SPY$high - SPY$low
# Create a scatterplot for "spread" vs changepercent
ggplot(data = SPY, aes(x = spread, y = changePercent)) +
geom_point(color = "dodgerblue")
# Create a scatterplot for "spread" vs volume
ggplot(data = SPY, aes(x = spread, y = volume)) +
geom_point(color = "dodgerblue")
# Create a scatterplot for "spread" vs volume
SPY$logVolume <- log(SPY$volume)
ggplot(data = SPY, aes(x = spread, y = logVolume)) +
geom_point(color = "dodgerblue")
SPY$logChangePercent <- log(abs(SPY$changePercent))
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = logVolume, y = changePercent)) +
geom_point(color = "dodgerblue")
# Create a scatterplot for "spread" vs volume
SPY$logVolume <- log(SPY$volume)
ggplot(data = SPY, aes(x = spread, y = logVolume)) +
geom_point(color = "dodgerblue")
# Create a scatterplot for "spread" vs volume
SPY$logVolume <- log(SPY$volume)
ggplot(data = SPY, aes(x = spread, y = volume)) +
geom_point(color = "dodgerblue")
find_peaks <- function (x, m = 3){
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
findPeaks(SPL$close, 3)
find_peaks(SPL$close, 3)
find_peaks(SPL$close)
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "10y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "max" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, y = close, group = 1)) +
geom_line(color = "dodgerblue")
# Create a scatterplot for volume vs changepercent
ggplot(data = SPY, aes(x = volume, y = changePercent)) +
geom_point(color = "dodgerblue")
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, y = change, group = 1)) +
geom_line(color = "dodgerblue")
# Create a time series chart of the stock price
ggplot(data = SPY, aes(x = date, y = changePercent, group = 1)) +
geom_line(color = "dodgerblue")
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "max" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Documentation
SPYadv <- GET(url=paste(baseURL, "stock/spy/advanced-stats/?token=", apiKey, sep=""))
SPYadv <- content(SPYadv, as = "text", encoding = "UTF-8")
SPYadv <- data.frame(fromJSON(SPYadv, flatten = TRUE))
View(SPL)
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "max" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Documentation
SPYadv <- GET(url=paste(baseURL, "stock/spy/advanced-stats/?token=", apiKey, sep=""))
SPYadv <- content(SPYadv, as = "text", encoding = "UTF-8")
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "max" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Documentation
SPYadv <- GET(url=paste(baseURL, "stock/spy/advanced-stats/?token=", apiKey, sep=""))
SPYadv <- content(SPYadv, as = "text", encoding = "UTF-8")
SPYadv <- data.frame(fromJSON(SPYadv, flatten = TRUE))
SPYadv
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "5y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Documentation
SPYadv <- GET(url=paste(baseURL, "stock/spy/earnings/20/?token=", apiKey, sep=""))
SPYadv <- content(SPYadv, as = "text", encoding = "UTF-8")
SPYadv <- data.frame(fromJSON(SPYadv, flatten = TRUE))
View(SPYadv)
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "5y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Documentation
SPYadv <- GET(url=paste(baseURL, "stock/aapl/earnings/20/?token=", apiKey, sep=""))
SPYadv <- content(SPYadv, as = "text", encoding = "UTF-8")
SPYadv <- data.frame(fromJSON(SPYadv, flatten = TRUE))
View(SPYadv)
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "5y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Documentation
SPYadv <- GET(url=paste(baseURL, "stock/aapl/earnings/20/?token=", apiKey, sep=""))
SPYadv <- content(SPYadv, as = "text", encoding = "UTF-8")
SPYadv
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "5y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Documentation
SPYadv <- GET(url=paste(baseURL, "stock/aapl/earnings/?last=20&token=", apiKey, sep=""))
SPYadv <- content(SPYadv, as = "text", encoding = "UTF-8")
View(SPY)
# NOTE: If you rerun this chunk a bunch of times, the API will stop sending data
# Import data from IEX Cloud API
apiKey <- "pk_167d86a9888d44e29cb7b636c7265d25"
apiKey <- "Tpk_a8297c33664948cd9a8b2ae7f13b32b3"
baseURL <- "https://sandbox.iexapis.com/stable/"
# Documentation: https://iexcloud.io/docs/api/#historical-prices
date <- "5y" # "5y", "1y", "ytd", "max" are some alternatives
SPY <- GET(url=paste(baseURL, "stock/spy/chart/", date, "?token=", apiKey, sep=""))
SPY <- content(SPY, as = "text", encoding = "UTF-8")
SPY <- data.frame(fromJSON(SPY, flatten = TRUE))
# Documentation
SPYadv <- GET(url=paste(baseURL, "stock/aapl/earnings/?last=20&token=", apiKey, sep=""))
SPYadv <- content(SPYadv, as = "text", encoding = "UTF-8")
SPYadv <- data.frame(fromJSON(SPYadv, flatten = TRUE))
View(SPYadv)
